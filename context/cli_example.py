# demo_run_pdd_cli.py
"""
Minimal, self‑contained demo showing how to call PDD’s CLI programmatically.

What it does
------------
1. Creates a tiny prompt file in ./output/
2. Invokes the PDD CLI (imported from pdd.cli) with Click’s CliRunner
   for the single command:
       pdd --local generate --output ./output/hello.py ./output/hello_python.prompt
3. Prints the Rich / Click console output and the generated code path.

Why “--local”?
--------------
The real `generate` command normally contacts the cloud.  Passing --local
forces use of a local model so the example runs without network access.

Files written
-------------
output/hello_python.prompt   – the prompt we create
output/hello.py              – the code generated by PDD
"""

from pathlib import Path
from textwrap import dedent

from click.testing import CliRunner

# 1) IMPORT THE CLI ENTRY POINT
#    The CLI lives in pdd/cli.py and exposes a Click group named `cli`.
from pdd.cli import cli

# --------------------------------------------------------------------------
# 1. Prepare a very small prompt file
# --------------------------------------------------------------------------
output_dir = Path("output")
output_dir.mkdir(exist_ok=True)

prompt_path = output_dir / "hello_python.prompt"
prompt_path.write_text(
    dedent(
        """
        You are an expert Python engineer.
        Write a function `hello()` that returns the string "Hello, PDD!".
        """
    ).strip(),
    encoding="utf-8",
)

# --------------------------------------------------------------------------
# 2. Invoke the CLI with Click’s test runner
# --------------------------------------------------------------------------
runner = CliRunner(mix_stderr=False)  # capture stdout+stderr together

# Global options come first, then the command and its options/args.
result = runner.invoke(
    cli,
    [
        "--local",                    # run without hitting the cloud
        "--quiet",                    # suppress Rich progress bars etc.
        "generate",                   # command name
        "--output", str(output_dir / "hello.py"),
        str(prompt_path),
    ],
)

# --------------------------------------------------------------------------
# 3. Show what happened
# --------------------------------------------------------------------------
print("Exit code :", result.exit_code)
print("-" * 40)
print("CLI output:")
print(result.output)
print("-" * 40)

generated_file = output_dir / "hello.py"
if generated_file.exists():
    print(f"Generated code saved to: {generated_file.resolve()}")
    print("First few lines:")
    print("\n".join(generated_file.read_text(encoding='utf-8').splitlines()[:10]))
else:
    print("Generation failed – file was not created.")
