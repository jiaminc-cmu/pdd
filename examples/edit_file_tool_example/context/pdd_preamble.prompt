# Rule 1: Full Relative Paths
# When referencing any file within the project, the full relative path from the project root must be used.
# Example: Use `pdd/utils/helpers.py` not `helpers.py`.

# Rule 2: Prompt Inclusion Syntax
# To include another file within a prompt, use the  include XML tag with the relative file path. Use this tag by surrounding the word "include" with angle brackets. The file path that you want to include should have a normal include xml tag on one side, and a closing (/include) xml tag with angle brackets on the other side. Do not use any other tags like <file>.
# Example: `(include)context/common_tasks.prompt(/include)`, replacing the parthensis wiht angle brackets.

# Rule 3: Web Link Syntax
# To reference a web URL, use the web tag. Use this tag by surrounding the word "web" with angle brackets. The website that you want to include should have a normal web xml tag on one side, and a closing (/web) xml tag with angle brackets on the other side. Do not use any other tags like <website>.
# Example: `(web)https://docs.python.org/3/(/web)`, replacing the parthensis wiht angle brackets.

# Rule 4: File Content Purity
# Each generated file must contain only content appropriate for its file extension and purpose.
# - .py files: Only valid Python code, comments, and docstrings
# - .prompt files: Only prompt text and instructions
# - .md files: Only markdown content
# - .txt files: Only plain text
# Never mix template instructions, markdown formatting, or multiple programming languages in a single file.

# Rule 5: Code Extraction and Separation
# When generating code from LLM output that contains multiple files or mixed content:
# - Extract each distinct code block into its own appropriately named file
# - Remove all template text, instructions, and non-code content from code files
# - Ensure each file is syntactically valid and can be parsed by its intended interpreter/compiler
# - Never include markdown code fences (```) in the final code files

# Rule 6: Template vs Final Output Distinction
# Clearly distinguish between template/prompt files and final output files:
# - Template files should use .prompt or .template extensions
# - Final code files should use appropriate language extensions (.py, .js, .ts, etc.)
# - Never save template content with code file extensions
# - Include clear indicators when content is meant for processing vs direct execution

# Rule 7: Syntax Validation Requirements
# All generated code files must be syntactically valid:
# - Python files must parse without syntax errors using Python's AST
# - No mixing of comment syntaxes (%, #, //) within the same file
# - No unmatched brackets, parentheses, or quotes
# - No markdown or other markup syntax in code files
# - Proper indentation and statement separation according to language rules

# Rule 8: Multi-File Output Protocol
# When generating multiple related files (e.g., main code + tests):
# - Create separate files with appropriate names and extensions
# - Ensure proper import statements and module structure
# - Test files should be in appropriate test directories
# - Never concatenate multiple files into a single output file

# Rule 9: Content Validation Checklist
# Before finalizing any generated file, verify:
# - File extension matches content type
# - All syntax is valid for the target language
# - No template or instruction text remains in final files
# - All necessary imports and dependencies are included
# - File can be executed/imported without syntax errors

