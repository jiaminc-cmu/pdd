full_path,file_summary,date
"examples/__init__.py","This file is an `__init__.py` file, which serves to mark the project's root directory as a Python package. Its presence is crucial for the Python interpreter to recognize the directory and its subdirectories as a package structure. This allows for absolute imports from within the project, such as `from edit_file_tool.utils import ...`, to be resolved correctly. Without this file, such import statements would likely fail with a `ModuleNotFoundError`. In essence, it transforms a simple folder into a package, enabling a modular and organized project structure.",2025-08-20T01:39:20.289132+00:00
"examples/cache_manager_example.py","This Python script, `cache_manager_example.py`, serves as a runnable example to demonstrate the functionality of the `CacheManager` class. The core of the script is the `demonstrate_cache_manager` function, which systematically tests the `manager.should_use_cache` method under various conditions. It is organized into four distinct scenarios. The first tests explicit user overrides, ensuring that flags like 'always' and 'never' are respected. The second scenario demonstrates the 'auto' mode's behavior based on file size, showing how it handles very small (<1KB) and very large (>4KB) files. The third scenario delves into the 'auto' mode's complexity analysis for medium-sized files, using metrics like line count and content density to make a decision. The final scenario covers edge cases, such as empty files. A helper function, `run_test_case`, is used to execute each test, print the inputs and outputs, and report a clear PASS/FAIL result. The script is designed to be executed directly, with initial setup code to handle Python's import path.",2025-08-20T01:39:20.348506+00:00
"examples/cli_example.py","This Python script, `cli_example.py`, serves as a comprehensive demonstration for a command-line tool called `edit_file_tool`. The script is designed to be run from the project's root directory and showcases the tool's capabilities through a series of automated scenarios. It begins by setting up a temporary directory to house test files, ensuring a clean execution environment. The main function, `demonstrate_cli_usage`, orchestrates four key tests. First, it performs a basic successful file edit on a text file. Second, it demonstrates the use of advanced command-line options such as `--verbose`, `--model`, and `--cache` on a Python file. The last two scenarios focus on error handling: one tests the tool's response to a non-existent file path, and the other verifies its behavior when the required `ANTHROPIC_API_KEY` environment variable is not set. The script uses helper functions to print formatted output, run commands via the `subprocess` module, and read file contents for verification. A `try...finally` block ensures that the temporary directory is always cleaned up after the demonstration completes, making the script a self-contained and robust example of the CLI tool's functionality.",2025-08-20T01:39:20.392520+00:00
"examples/core_example.py","This Python script, `core_example.py`, serves as a comprehensive demonstration for the `edit_file` function from the `edit_file_tool.core` module. It utilizes `asyncio` for asynchronous operations and requires an `ANTHROPIC_API_KEY` to interact with an AI model. The script systematically showcases the tool's capabilities through four distinct scenarios executed within a temporary directory. The first scenario demonstrates a simple, successful text replacement in a `.txt` file. The second presents a more complex, multi-step edit on a Python file, involving renaming a function and adding a docstring. The final two scenarios highlight the tool's robust error handling: one for attempting to edit a non-existent file, and another for gracefully exiting after reaching a maximum iteration limit when faced with an ambiguous instruction. Each scenario clearly outlines the initial state, the given instruction, the final result including success status and cost, and a verification of the outcome. The script ensures proper setup and cleanup, making it a clear and effective example of the core functionality.",2025-08-20T01:39:33.329925+00:00
"examples/editor_tool_example.py","This Python script serves as a comprehensive example for a file manipulation utility named `EditTool20250124`. The script's main function, `demonstrate_editor_tool`, showcases the tool's core functionalities within a temporary, self-contained environment. It begins by setting up a temporary directory to work in. The demonstration covers a wide range of operations, including creating new files, viewing the contents of both files and directories, inserting text at specific line numbers, replacing unique strings within a file, and undoing the last modification. A significant portion of the script is dedicated to demonstrating robust error handling. It intentionally triggers and gracefully handles common errors such as attempting to create a file that already exists, accessing a non-existent file, using out-of-bounds line numbers, and failing to find a string for replacement. Furthermore, the script highlights the tool's security features by showing how it prevents directory traversal attacks and blocks the use of absolute file paths. The script concludes by cleaning up the temporary directory, ensuring no artifacts are left behind. The overall structure makes it a clear and effective guide for understanding the tool's capabilities, limitations, and safety measures.",2025-08-20T01:39:33.386473+00:00
"examples/file_io_example.py","This Python script, `file_io_example.py`, serves as a comprehensive demonstration for an asynchronous file I/O module. It utilizes the `asyncio` library to showcase the functionalities of `read_file_async` and `write_file_async` functions. The script operates within a temporary directory, which it creates and later removes, ensuring a clean and isolated execution environment. It systematically tests five key scenarios: a successful write followed by a read verification; the automatic creation of parent directories when writing to a nested path; graceful error handling when attempting to read a non-existent file; robust security validation that successfully prevents directory traversal attacks for both read and write operations; and correct error handling for attempts to read from or write to a directory path. For each scenario, the script prints clear success or failure messages to the console, effectively illustrating the capabilities, error handling, and security features of the `file_io` module. The main execution block uses `asyncio.run()` to start the demonstration.",2025-08-20T01:39:33.460756+00:00
"examples/instruction_parser_example.py","This Python script, `instruction_parser_example.py`, serves as a comprehensive demonstration of the `InstructionParser` class from the `edit_file_tool` library. The script's primary function is to showcase how the parser can convert natural language instructions for file modifications into structured, machine-executable commands. It requires an `ANTHROPIC_API_KEY` to interact with the Anthropic API, which powers the natural language understanding. The main `demonstrate_parser` function executes four distinct scenarios to highlight the parser's capabilities: 1.  **Simple String Replacement**: Changing a greeting in a sample Python file. 2.  **Multi-Step Edit**: Simultaneously updating a version number and inserting a new comment at a specific line. 3.  **File Creation**: Generating a new JSON configuration file with specified content. 4.  **Handling Ambiguity**: Processing a vague instruction like Just fix the code, where the parser is expected to correctly return an empty list of commands. The script is asynchronous, uses helper functions for formatted output, and includes robust error handling for cases like a missing API key or parsing failures. It is designed to be run from the command line to provide a clear, step-by-step walkthrough of the parser's features.",2025-08-20T01:39:33.514912+00:00
"examples/think_tool_example.py","This Python script serves as a comprehensive example demonstrating the functionality of a `ThinkTool`. The primary purpose of this tool is to provide a language model with a private 'scratchpad' for planning and reasoning through complex, multi-step tasks without cluttering the main conversation history. The script is structured into three main parts. First, it shows how to retrieve the tool's JSON schema using the `get_definition()` method, which is essential for integrating the tool with an API like Anthropic's. Second, it demonstrates the `use()` method, highlighting that it's a client-side no-op that simply returns a static confirmation message, as the value lies in the model's ability to structure its thoughts. Finally, the script simulates a complete conceptual API interaction loop, walking through how an application would receive a `tool_use` request from the model, execute the `ThinkTool`, and send the result back to continue the process. The script uses print statements to explain each step, making it a clear guide for developers.",2025-08-20T01:39:33.606171+00:00
"examples/utils_example.log","This log file documents the output of a test script for a module named `utils_example`, which was executed multiple times on August 4th, 2025. The logs reveal a consistent sequence of tests performed during each run, focusing on security, error handling, and resilience. Key functionalities demonstrated include a warning about logging sensitive data, suggesting a check for sanitization. The system successfully validates its security by catching and preventing a path traversal attempt using `../../../etc/passwd`. It also correctly handles file operation errors by identifying when a target file does not exist. Furthermore, the logs show a successful test of a retry mechanism for a mock flaky API call, which fails twice before succeeding on the third attempt. This indicates robust handling of transient network issues. Overall, the log file confirms that the `utils_example` module's error handling and security features are functioning as expected across multiple test scenarios.",2025-08-13T20:27:09.175307+00:00
"examples/utils_example.py","This Python script, `utils_example.py`, serves as a comprehensive demonstration for a utility module located at `edit_file_tool.utils`. The script is structured to showcase various functionalities in a step-by-step manner. Key features demonstrated include a robust logging system with sanitization for sensitive data like API keys, and advanced validation utilities for file paths to prevent security risks like directory traversal. It also covers exception handling for custom errors such as `ValidationError` and `FileOperationError`. The script highlights cost management features by showing how to calculate and format API call costs based on model, token count, and cache status. It introduces a smart caching strategy that recommends whether to cache a file based on its size and complexity. Furthermore, it demonstrates the use of performance-enhancing decorators like `@retry` for handling flaky API calls and `@timed` for logging execution times. Finally, it includes system integration helpers for checking compatibility and formatting performance metrics. The entire demonstration is executed within an asynchronous function, with clear output printed to the console and detailed logs written to a file.",2025-08-20T01:39:33.684429+00:00
