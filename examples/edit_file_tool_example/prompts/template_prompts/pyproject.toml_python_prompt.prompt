Create a comprehensive `{pyproject.toml.py}.prompt` file that serves as a customized version of <template_base><include>prompts/script_prompts/template_from_json_prompt.prompt</include></template_base>. When {pyproject.toml.py} is replaced with a component path from <architecture><include>examples\edit_file_tool_example\pdd\architecture.json</include></architecture> (e.g., "edit_file_tool/file_handler", "edit_file_tool/anthropic_service"), this template will generate production-ready, well-tested Python modules.

**Essential Context:**
<readme_context><include>EDIT_FILE_TOOL_README.md</include></readme_context>
<pdd_rules><include>context/pdd_preamble.prompt</include></pdd_rules>

**Core Model Requirements:**
1. Enforce usage of claude-3-7-sonnet-20250219 model throughout the project:
   - Required for text_editor_20250124 tool compatibility
   - Needed for consistent API responses and tool usage
   - Essential for proper integration with Anthropic's text editor capabilities
   - Must be used by all API client components for all calls
   - Adhere to the file and web referencing rules in <pdd_rules>

**Dynamic Component Analysis Process:**
1. **Component Discovery:**
   - Extract the target component's information from <architecture>
   - Use the component's "reason" field to define core purpose
   - Use the component's "description" field to identify:
     - Key functions and methods required
     - Integration points with claude-3-7-sonnet-20250219
     - Performance considerations for model interaction
     - Error handling requirements for API calls
     - Dependencies and internal component relationships

2. **Intelligent Component Classification:**
   Based on the component's filename, description, and reason from <architecture>, dynamically classify to determine appropriate enhancements:
   
   **Web Reference Priority Strategy:** Include only the most essential 2-3 web references per component type to avoid rate limiting. References are listed in order of importance.
   
   **API Components** (contains "api", "client", "service", "anthropic"):
   - Priority web references: <web>https://docs.anthropic.com/en/docs/build-with-claude/tool-use</web>, <web>https://docs.anthropic.com/en/docs/agents-and-tools/tool-use/text-editor-tool</web>, <web>https://docs.anthropic.com/en/sdk/python</web>
   - Add rate limiting, retry logic, and cost tracking requirements
   - Include think tool integration for complex reasoning
   - Add prompt caching optimization strategies

   **File Operations** (contains "file", "io", "handler", "read", "write"):
   - Priority web references: <web>https://docs.python.org/3/library/pathlib.html</web>, <web>https://docs.python.org/3/library/io.html</web>
   - Add file safety, backup, and encoding requirements
   - Include text_editor_20250124 tool operation integration
   - Add support for various file types and sizes

   **Testing & Validation** (contains "test", "benchmark", "validation"):
   - Priority web references: <web>https://docs.pytest.org/en/stable/</web>, <web>https://docs.python.org/3/library/unittest.mock.html</web>
   - Add comprehensive test coverage requirements
   - Include model-specific test scenarios
   - Add performance benchmarking capabilities

   **CLI & Interface** (contains "cli", "command", "interface", "main"):
   - Priority web references: <web>https://click.palletsprojects.com/en/8.1.x/</web>, <web>https://docs.python.org/3/library/argparse.html</web>
   - Add user interaction and UX requirements
   - Include error messaging and help text
   - Add progress indicators and verbose output

   **Async & Concurrency** (contains "async", "concurrent", "parallel"):
   - Priority web references: <web>https://docs.python.org/3/library/asyncio.html</web>
   - Add proper async/await patterns
   - Include concurrent API call handling
   - Add async context management

   **Configuration & Setup** (contains "config", "setup", "settings"):
   - Priority web references: <web>https://packaging.python.org/en/latest/tutorials/packaging-projects/</web>, <web>https://setuptools.pypa.io/en/latest/userguide/entry_point.html</web>
   - Add environment variable management
   - Include configuration validation
   - Add backwards compatibility considerations

   **Utility & Helper** (contains "util", "helper", "common"):
   - Priority web references: <web>https://docs.python.org/3/library/functools.html</web>
   - Add reusable function patterns
   - Include performance optimization utilities
   - Add common error handling patterns

**Enhanced Template Structure:**

1. **Dynamic Base Integration:**
   - Start with content from <template_base>
   - Enhance with component-specific information from <architecture>
   - Add intelligent dependency resolution
   - Include cross-component communication patterns

2. **Model Integration Requirements:**
   ```
   Model: claude-3-7-sonnet-20250219
   Required Tools: text_editor_20250124, think_tool
   API Features: tool_use, prompt_caching, cost_tracking
   Token Management: 200K context window with 180K recommended max
   Performance: Optimize for caching when file size > 4KB
   ```

3. **Smart Dependency Resolution with Hierarchical Constraints:**
   - **Dependency Order Rule:** Components in <architecture> are ordered from created first to last
   - **Downward Dependency Only:** A component can ONLY depend on (include) components that appear BEFORE it in the <architecture> ordering
   - **Upward Reference Allowed:** A component can reference being "called by" or "used by" components that appear AFTER it in the ordering
   - **Dependency Analysis Process:**
     - Extract the target component's position in <architecture>
     - Identify all components that appear BEFORE the target (potential dependencies)
     - Identify all components that appear AFTER the target (potential callers/users)
     - For dependencies: include using <dependency_name>(PDD_XML_TAG_HERE)relative/path/to/dependency(PDD_XML_TAG_HERE)</dependency_name>
     - For callers: reference in documentation as "used by" or "called by" but do NOT include
   - Add external package requirements based on component type
   - Include proper import statements and initialization patterns
   - Add error handling for missing dependencies

4. **Integration Points Analysis with Hierarchical Awareness:**
   - **Bidirectional Analysis:** Identify components that interact with the target component
   - **Dependency Integration:** Components appearing BEFORE the target in <architecture> (dependencies)
     - Can be imported and used directly by the target component
     - Map incoming data flow and interfaces from these components
     - Add proper interface definitions for consuming their functionality
   - **Caller Integration:** Components appearing AFTER the target in <architecture> (callers/users)
     - Cannot be imported by the target component
     - Target component should expose interfaces for these future callers
     - Document expected usage patterns and integration points
     - Design APIs that will be consumed by higher-level components
   - Include error propagation patterns (both upward and downward)
   - Add logging and monitoring integration

**Advanced Enhancements:**

1. **Performance Optimization:**
   - Add token usage optimization strategies
   - Include memory management for large files
   - Add caching strategies for repeated operations
   - Include async patterns where beneficial

2. **Error Handling & Resilience:**
   - Add comprehensive exception handling
   - Include retry mechanisms for API calls
   - Add graceful degradation patterns
   - Include proper logging and debugging support

3. **Testing & Quality Assurance:**
   - Add unit test templates
   - Include integration test patterns
   - Add performance benchmarking
   - Include code coverage requirements

4. **Documentation & Maintainability:**
   - Add comprehensive docstrings
   - Include type hints and annotations
   - Add inline comments for complex logic
   - Include usage examples and best practices

5. **Security & Validation:**
   - Add input validation patterns
   - Include secure API key handling
   - Add rate limiting protection
   - Include data sanitization requirements

**PDD XML Tag Usage Requirements:**
When the generated prompt needs to reference external resources, it MUST use PDD's specific XML tag format:

1. **File References:** 
   - Use the XML tag "include" (surrounded by angle brackets) with the relative file path inside
   - Example format: the include tag with "edit_file_tool/utils.py" inside the tags
   - Never use direct file paths or import statements in the prompt text

2. **Website References:**
   - Use the XML tag "web" (surrounded by angle brackets) with the URL inside  
   - Example format: the web tag with "https://docs.python.org/3/library/pathlib.html" inside the tags
   - Never use direct URLs or markdown links in the prompt text

3. **Tag Placement:**
   - File reference tags should be placed where dependencies are mentioned
   - Website reference tags should be placed where documentation is referenced
   - Tags can be used inline within sentences or as standalone references

**Dynamic Prompt Generation Rules:**

1. **Component-Specific Customization:**
   - Use the component's exact name, description, and reason from <architecture>
   - Include only relevant web references based on component type using the web XML tag format
   - Add appropriate dependencies using the include XML tag format for file references
   - Include integration points specific to the component's role

2. **Adaptive Requirements:**
   - Scale complexity based on component criticality
   - Add more robust error handling for core components
   - Include additional testing for API-facing components
   - Add performance monitoring for resource-intensive components

3. **Cross-Component Intelligence:**
   - Analyze how the component fits into the overall system
   - Add appropriate interfaces for component communication
   - Include proper initialization and cleanup patterns
   - Add monitoring and logging integration

**Output Requirements:**
- Generate a complete, executable Python module
- Include all necessary imports and dependencies
- Add comprehensive error handling and logging
- Include proper documentation and type hints
- Add integration with the text_editor_20250124 tool where applicable
- Ensure compatibility with claude-3-7-sonnet-20250219 model requirements
- Include cost tracking and performance monitoring
- Add proper testing patterns and examples

**Quality Assurance:**
- Validate all code against Python best practices
- Ensure proper async/await usage where applicable
- Add comprehensive error handling
- Include proper resource management
- Add security considerations for API interactions
- Include performance optimization techniques

The resulting customized prompt will create a production-ready Python module that:
- Integrates seamlessly with the claude-3-7-sonnet-20250219 model
- Follows all project conventions and standards
- Includes proper error handling and logging
- Supports the text_editor_20250124 tool functionality
- Optimizes for performance and cost efficiency
- Maintains high code quality and testability
- Provides comprehensive documentation and examples
