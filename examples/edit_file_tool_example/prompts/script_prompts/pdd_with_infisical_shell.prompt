You are an expert bash script developer. Create a bash script that acts as a wrapper for a Python workflow.

The script should be named `pdd_with_infisical.sh` and is expected to be located in a `scripts` directory within a larger project.

Here are the detailed requirements:

1. **Error Handling:** The script must exit immediately if any command fails. Use `set -e`.
2. **Argument Parsing:**
    - It must accept one mandatory argument: `<component_name>`.
    - It can accept any number of additional optional arguments that will be passed down to the Python script.
    - If the `<component_name>` is not provided, the script should print a detailed usage message with examples (e.g., for a component named `utils` with and without extra flags) and then exit with a status of 1.
3. **Directory Management:**
    - The script must determine its own location and calculate the project's root directory, which is the parent directory of the script's directory.
    - Before executing the main command, it must change the current working directory to the project root.
4. **Environment Setup:**
    - It must `source` another script located in its own directory named `setup_env_from_infisical.sh` to load necessary environment variables.
5. **Execution & Logging:**
    - After setting up, it should print several status messages to the user, including the component name it's running for, the current working directory, and a confirmation that the environment was loaded from Infisical. Use emojis for flair (e.g., üöÄ, üìÅ, üîê).
    - The final step is to execute the Python script `Scripts/PDD_workflow.py` using `python3`.
    - It must pass the `<component_name>` as the first argument to the Python script, followed by all the additional arguments it received.
6. **Documentation:**
    - Include comments at the top of the script explaining its purpose and usage.