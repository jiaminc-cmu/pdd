Create a comprehensive Makefile for managing a project that uses a command-line tool called `pdd`. The Makefile should be well-commented, provide user-friendly output, and be highly configurable.

**1. Basic Setup:**
- Set the shell to `/bin/bash`.
- Define variables for the following directories: `EDIT_FILE_TOOL_DIR`, `TESTS_DIR`, `LOGS_DIR`, `COST_REPORTS_DIR`, `PROMPTS_DIR`, `EXAMPLES_DIR`.
- Create a `setup` target that creates all of the above directories using `mkdir -p`.
- Create a `clean` target that removes all files and subdirectories within each of the defined directories, but leaves the directories themselves.
- Create a `clean-all` target that removes the `EDIT_FILE_TOOL_DIR` and `TESTS_DIR` directories entirely. It should also remove the file `pdd/architecture.json`. Do not remove the `LOGS_DIR` or `COST_REPORTS_DIR`.

**2. Configuration Variables:**
- The Makefile should be configurable via command-line variables with sensible defaults (using `?=`).
- **PDD Configuration:**
    - `USE_INFISICAL` (default: `yes`): If 'yes', wrap `pdd` commands with `infisical run --`.
    - `USE_LOCAL` (default: `yes`): If 'yes', add the `--local` flag to `pdd` commands.
    - Provide comments with examples of how to use these flags.
- **Component Building Configuration:**
    - `CLEAN_COMPONENTS` (default: `yes`): If 'yes', pass a `--clean` flag to the component build script.
    - `ENABLE_TAGGING` (default: `no`): An environment variable to be exported.
- **Component Deletion Configuration:**
    - `DRY_RUN` (default: `no`): If 'yes', pass `--dry-run` to the delete script.
    - `FORCE_DELETE` (default: `no`): If 'yes', pass `--force` to the delete script.

**3. Dynamic Command Construction:**
- Based on the configuration variables, construct the following command variables:
    - `PDD_CMD`: Dynamically built based on `USE_INFISICAL` and `USE_LOCAL`.
    - `WORKFLOW_FLAGS`: Set to `--clean` if `CLEAN_COMPONENTS` is 'yes'.
    - `DELETE_FLAGS`: Assembled from `DRY_RUN` and `FORCE_DELETE` flags.
- Export `USE_INFISICAL`, `USE_LOCAL`, `PDD_CMD`, and `ENABLE_TAGGING` so they are available to scripts called by the Makefile.

**4. Core Workflow Targets:**
- `arch_list`: Generates an `architecture.json` file by running `$(PDD_CMD) generate ...`. It should log output to `$(LOGS_DIR)/architecture_json.log` and track costs in `$(COST_REPORTS_DIR)/tool_track.csv`.
- `architecture`: Displays the `filename` and `reason` for each component from `pdd/architecture.json`. It should handle the case where the file doesn't exist.
- `prompts`: Generates individual component prompts by running `python Scripts/prompts_script.py`. It must check if `pdd/architecture.json` exists first and fail with an error if it doesn't.
- `default` (`all`): The default target when `make` is run. It should execute `setup`, `arch_list`, `prompts`, and `build_all_components` in order.

**5. Flexible Component Management:**
- The Makefile must handle targets that take additional arguments from the command line (e.g., `make component component_a component_b`). Use the `$(filter-out $@,$(MAKECMDGOALS))` pattern to capture these arguments.
- **`build_all_components` target:**
    - This target builds all components defined in `pdd/architecture.json`.
    - It must first list all components to be built and prompt the user for confirmation ('y' to proceed).
    - If confirmed, it should get the list of components by running `python all_components.py` and then loop through them, building each one with `python Scripts/PDD_workflow.py <component_name> $(WORKFLOW_FLAGS)`.
- **`component` target:**
    - This is a flexible builder. If the argument is `all` (i.e., `make component all`), it should invoke the `build_all_components` target.
    - Otherwise, it should loop through each component name provided as an argument. For each component, it must first run `python Scripts/component_delete.py <component_name> --force` to ensure a clean state, and then build it with `python Scripts/PDD_workflow.py <component_name> $(WORKFLOW_FLAGS)`.
- **`component-delete` target:**
    - This target deletes one or more components specified as arguments.
    - It should loop through the provided component names and call `python Scripts/component_delete.py <component_name> $(DELETE_FLAGS)` for each.
    - Provide helpful usage instructions if no component name is given.

**6. Integration and Utility Targets:**
- `infisical-component`: A target that builds components using a specific script: `./scripts/pdd_with_infisical.sh <component_name>`. It should also handle multiple component arguments.
- `infisical-run`: A generic wrapper to run any command with Infisical secrets. It should take a `COMMAND` variable (e.g., `make infisical-run COMMAND="pdd sync"`). The implementation should source `scripts/setup_env_from_infisical.sh` before running the command.
- `test`: A target to run tests using `pytest`. It should run all `test_*.py` files in the `$(TESTS_DIR)` directory.

**7. Makefile Best Practices:**
- Declare all non-file targets as `.PHONY`.
- Use `@` before commands to suppress echoing and create clean, readable output. Use `echo` to print informative status messages. Include a catch-all target `%: @:` at the end to prevent Make from failing when it interprets component names as targets.