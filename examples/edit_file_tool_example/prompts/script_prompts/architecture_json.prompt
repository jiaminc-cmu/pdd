% ROLE -----------------------------------------------------------------------
% You are an expert Python developer and software architect specializing in AI tool development, 
% async programming, and Claude API integration. Your goal is to specify the necessary components 
% that will implement a production-ready edit-file tool with advanced caching, multi-model support, 
% and performance optimization. There is a 1-to-1 relationship between each JSON component and the 
% actual Python files/modules that need to be created.

% INPUT SOURCE ----------------------------------------------------------------
% Here is the README for context:
<readme><include>EDIT_FILE_TOOL_README.md</include></readme>

% OUTPUT FORMAT ----------------------------------------------------------------
% Produce a JSON array where each object has these exact fields IN THIS ORDER:
% {
%   "reason": "Brief explanation of why this component is needed",
%   "description": "Comprehensive multi-paragraph description (see DESCRIPTION REQUIREMENTS below)",
%   "dependencies": ["list", "of", "files", "this", "component", "depends", "on"],
%   "filename": "file.py",
%   "path": "relative/path/to/file.py",
%   "priority": 1,
%   "component_type": "core|api|tool|parser|cache|utility|package"
% }

% CRITICAL: The JSON array must be sorted by priority (lowest priority number first), 
% ensuring that foundational components (utilities, file I/O, API clients) appear before dependent 
% components (tools, parsers, orchestration, CLI, package). This creates the proper dependency-based creation order.

% SCOPE -----------------------------------------------------------------------
% Analyze the README thoroughly to identify all necessary components for implementing the edit-file tool.
% For each component, determine:
% 1. **What functionality does the README describe that requires this component?**
% 2. **What other components does this component depend on?**  
% 3. **What priority should this component have based on its dependencies?**
% 4. **What component_type best categorizes this functionality?**

% Follow these architectural principles when identifying components:
% • **Start with zero-dependency utilities** - identify foundational components that other modules will need
% • **Build up dependency layers** - each component should only depend on components with lower priorities  
% • **Separate concerns clearly** - group related functionality but maintain clear boundaries
% • **Consider the user workflow** - trace through how a user would interact with the tool end-to-end
% • **Include all README functionality** - ensure every feature/capability mentioned is covered by some component
% • **Avoid over-engineering** - only create components that are clearly evidenced by README requirements

% Use the ARCHITECTURAL ORGANIZATION and CROSS-COMPONENT DEPENDENCIES sections below as guidelines 
% for proper component categorization and dependency management, but let the README content drive 
% the specific components you identify rather than following a predetermined list.

% DESCRIPTION REQUIREMENTS ---------------------------------------------------
% For each "description" field, provide exactly 3-4 structured paragraphs:

% **Paragraph 1 - Purpose & Responsibilities:**
%   - Primary role in the edit-file tool ecosystem
%   - Core responsibilities and main functions
%   - How it fits into the overall architecture

% **Paragraph 2 - Implementation Details:**
%   - Key classes, functions, and algorithms
%   - Async operations and performance patterns
%   - API integration specifics (Anthropic SDK, model versions)
%   - Caching logic and optimization strategies

% **Paragraph 3 - Integration & Dependencies:**
%   - How it integrates with other components
%   - Dependency relationships and data flow
%   - Error handling and validation approaches
%   - State management and persistence methods

% **Paragraph 4 (if applicable) - Advanced Features:**
%   - Model version compatibility and feature requirements
%   - Performance benchmarking integration and cost tracking
%   - Recovery mechanisms and iteration management
%   - Special considerations, edge cases, or optimization techniques

% ARCHITECTURAL ORGANIZATION -------------------------------------------------
% 1. **Component Categorization:**
%    - Ensure proper separation of concerns across component types
%    - Group related functionality (core, api, tools, parsers, cache, utilities)
%    - Follow Python package structure best practices
%    - Maintain clear architectural boundaries

% 2. **Dependency Management:**
%    - Create logical dependency hierarchies (utilities -> core -> api -> tools)
%    - Minimize circular dependencies between components
%    - Ensure foundational components have minimal dependencies
%    - Document cross-component interfaces and contracts

% 3. **Priority-Based Development Order:**
%    - Priority 1-3: Foundation (utilities, file I/O, API clients) - minimal dependencies
%    - Priority 4-6: Mid-level functionality (tools, parsers, cache management) - depends on foundation
%    - Priority 7-8: High-level orchestration (core workflow, CLI) - depends on all lower levels
%    - Priority 9+: Package setup and distribution - depends on CLI and entry points

% PERFORMANCE BENCHMARKS INTEGRATION ------------------------------------------
% Component descriptions should reference relevant performance data from the README:
% • **Think tool**: 13-43% token reduction, especially for complex edits
% • **Caching**: Up to 53% cost savings for large files (>4KB), specific thresholds and decision logic
% • **Auto-detection**: Smart cache decisions based on file size (1KB, 4KB) and complexity metrics
% • **Cost tracking**: Accurate pricing for cache operations (25% write premiums, 90% read discounts)
% • **Model optimization**: Claude 3.7 (text_editor_20250124) as primary/default, performance comparison data

% CROSS-COMPONENT DEPENDENCIES ------------------------------------------------
% Structure dependencies to follow these patterns:
% • **Utilities** (lowest level): logging, validation, type definitions - no dependencies
% • **File I/O**: safe file operations, encoding, backups (depends on utilities only)
% • **API Client**: Claude API wrapper, model handling (depends on utilities only)
% • **Tools**: text editor wrappers, think tool integration (depends on api, file I/O, utilities)
% • **Parsers**: instruction parsing, edit detection (depends on tools, utilities)
% • **Cache**: management, optimization (depends on api, file I/O, utilities)
% • **Core Orchestration**: main edit workflow (depends on tools, parsers, cache, api, file I/O, utilities)
% • **CLI**: command interface (depends on core orchestration and all other components)
% • **Package**: setup and distribution (depends on CLI and entry points)

% TECHNICAL REQUIREMENTS -----------------------------------------------------
% • All components must support Python 3.8+ with proper type hints
% • Async components must use proper async/await patterns with error handling
% • API keys loaded via environment variables (ANTHROPIC_API_KEY)
% • Multi-model compatibility with version validation and feature detection
% • Comprehensive error recovery with max 10 iterations and state restoration
% • Integration with external benchmarking and cost analysis tools
% • DO NOT invent components not evidenced by the README functionality
% • DO NOT CREATE ANY TEST COMPONENTS

% EXTERNAL REFERENCES ----------------------------------------------------------
<references>
  <!-- Anthropic Core APIs and Tools -->
  <tool_use><web>https://docs.anthropic.com/en/docs/build-with-claude/tool-use</web></tool_use>
  <text_editor_tool><web>https://docs.anthropic.com/en/docs/agents-and-tools/tool-use/text-editor-tool</web></text_editor_tool>
  <anthropic_sdk><web>https://docs.anthropic.com/en/sdk/python</web></anthropic_sdk>
  <anthropic_sdk_python><web>https://github.com/anthropics/anthropic-sdk-python</web></anthropic_sdk_python>
  <prompt_caching><web>https://docs.anthropic.com/en/docs/build-with-claude/prompt-caching</web></prompt_caching>
  <think_tool><web>https://www.anthropic.com/engineering/claude-think-tool</web></think_tool>
  
  <!-- Core Python File & Error Handling -->
  <pathlib><web>https://docs.python.org/3/library/pathlib.html</web></pathlib>
  <io><web>https://docs.python.org/3/library/io.html</web></io>
  <errors><web>https://docs.python.org/3/tutorial/errors.html</web></errors>
  <json><web>https://docs.python.org/3/library/json.html</web></json>
  
  <!-- Async & Type Support -->
  <asyncio><web>https://docs.python.org/3/library/asyncio.html</web></asyncio>
  <typing><web>https://docs.python.org/3/library/typing.html</web></typing>
  
  <!-- CLI & Argument Parsing -->
  <click><web>https://click.palletsprojects.com/en/8.1.x/</web></click>
  <argparse><web>https://docs.python.org/3/library/argparse.html</web></argparse>
  
  <!-- Logging & Utilities -->
  <logging><web>https://docs.python.org/3/library/logging.html</web></logging>
  
  <!-- Package Management & Distribution -->
  <packaging><web>https://packaging.python.org/en/latest/tutorials/packaging-projects/</web></packaging>
  <pep_517><web>https://peps.python.org/pep-0517/</web></pep_517>
  <setuptools><web>https://setuptools.pypa.io/en/latest/userguide/entry_point.html</web></setuptools>
</references>